package bizent;

import java.util.Date;
import java.util.Enumeration;
import java.util.Calendar;
import javax.swing.text.PlainDocument;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author ggmoy
 */
public class AddMovimiento extends javax.swing.JDialog {
    private Movimiento movimiento;

    /**
     * Creates new form AddMovimiento
     */
    public AddMovimiento(java.awt.Frame parent, boolean modal, int id, Cuenta cuenta) {
        super(parent, modal);
        initComponents();

        categTree.setModel(BizEnt.db.getCategoriasTreeModel());

        Calendar calendar = Calendar.getInstance();
        if (id > 0) {
            movimiento = BizEnt.db.getMovimiento(id);
            txtDescri.setText(movimiento.getDescri());
            txtMonto.setText(Double.toString(movimiento.getMonto()));
            calendar.setTime(movimiento.getFecha());
            selectTreeNode(movimiento.getCategoria());
        } else {
            movimiento = new Movimiento(0, 0, cuenta, null, null, "", 0);
        }

        cmbDia.setSelectedIndex(calendar.get(Calendar.DAY_OF_MONTH) - 1);
        cmbMes.setSelectedIndex(calendar.get(Calendar.MONTH));
        cmbAno.setSelectedIndex(calendar.get(Calendar.YEAR) - 2010);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTree2 = new javax.swing.JTree();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDescri = new javax.swing.JTextField();
        txtMonto = new javax.swing.JTextField();
        btnCancelar = new javax.swing.JButton();
        btnAceptar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbDia = new javax.swing.JComboBox();
        cmbMes = new javax.swing.JComboBox();
        cmbAno = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        categTree = new javax.swing.JTree();

        jScrollPane2.setViewportView(jTree2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Agregar Movimiento");
        setResizable(false);

        jLabel1.setText("Descripción:");

        jLabel3.setText("Monto:");

        ((PlainDocument) txtDescri.getDocument()).setDocumentFilter(new CustDocumentFilter("^[a-zA-Z0-9_\\- ]{0,30}$"));

        ((PlainDocument) txtMonto.getDocument()).setDocumentFilter(new CustDocumentFilter("^[0-9]*[.]{0,1}[0-9]{0,2}$"));

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        jLabel2.setText("Fecha:");

        jLabel4.setText("Categoría:");

        cmbDia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        cmbMes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        cmbMes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMesItemStateChanged(evt);
            }
        });
        cmbMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMesActionPerformed(evt);
            }
        });

        cmbAno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2010", "2011", "2012", "2013", "2014", "2015" }));
        cmbAno.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAnoItemStateChanged(evt);
            }
        });

        jScrollPane3.setViewportView(categTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addComponent(txtDescri, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cmbDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 68, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAceptar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancelar)))
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtDescri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnAceptar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        if (movimiento.getId() == 0) {
            if (insertMovimiento()) {
                return;
            }
       } else if (updateMovimiento()) {
           return;
       }

       this.dispose();
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void checkDaysOfMonth() {
        int lastDayOfMonth = BizEnt.getLastDayOfMonth(cmbMes.getSelectedIndex(), Integer.parseInt(cmbAno.getSelectedItem().toString()));

        if (cmbDia.getItemCount() > lastDayOfMonth) {
            while (cmbDia.getItemCount() != lastDayOfMonth) {
                cmbDia.removeItemAt(cmbDia.getItemCount() - 1);
            }
        } else if (cmbDia.getItemCount() < lastDayOfMonth) {
            while (cmbDia.getItemCount() != lastDayOfMonth) {
                cmbDia.insertItemAt(cmbDia.getItemCount() + 1, cmbDia.getItemCount());
            }
        }
    }

    private void cmbMesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMesItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            checkDaysOfMonth();
        }
    }//GEN-LAST:event_cmbMesItemStateChanged

    private void cmbAnoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAnoItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            checkDaysOfMonth();
        }
    }//GEN-LAST:event_cmbAnoItemStateChanged

    private void cmbMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbMesActionPerformed

    private Date getFecha() {
        Calendar calendar = Calendar.getInstance();

        calendar.set(Calendar.DAY_OF_MONTH, Integer.parseInt(cmbDia.getSelectedItem().toString()));
        calendar.set(Calendar.MONTH,        Integer.parseInt(cmbMes.getSelectedItem().toString()) - 1);
        calendar.set(Calendar.YEAR,         Integer.parseInt(cmbAno.getSelectedItem().toString()));

        return calendar.getTime();
    }

    private Categoria getSelectedCateg() {
        TreePath currentSelection = categTree.getSelectionPath();

        if (currentSelection != null) {
            return (Categoria) (((DefaultMutableTreeNode) currentSelection.getLastPathComponent()).getUserObject());
        }

        return null;
    }

    private void selectTreeNode(Categoria categ) {
        DefaultMutableTreeNode rootNode       = (DefaultMutableTreeNode) categTree.getModel().getRoot();
        Enumeration<DefaultMutableTreeNode> e = rootNode.depthFirstEnumeration();

        while (e.hasMoreElements()) {
            DefaultMutableTreeNode node = e.nextElement();
            if (node.toString().equals(categ.getName())) {
                categTree.setSelectionPath(new TreePath(node.getPath()));
            }
        }
    }

    private boolean insertMovimiento() {
        /* Verifico la informacion ingresada en el campo Nombre */
        if (txtDescri.getText().isEmpty()) {
            BizEnt.showERROR(this, "La descripción no puede estar vacia.");
            return true;
        } else {
            movimiento.setDescri(txtDescri.getText());
        }

        /* Verifico la Categoría seleccionada */
        if (getSelectedCateg() == null || getSelectedCateg().getId() == 1) {
            BizEnt.showERROR(this, "Debe seleccionar una categoría.");
            return true;
        } else {
            movimiento.setCategoria(getSelectedCateg());
        }

        /* Actualizo el monto del movimiento */
        try {
            movimiento.setMonto(Double.parseDouble(txtMonto.getText()));
        } catch (java.lang.NumberFormatException e) {
            BizEnt.showERROR(this, "El monto debe ser tipo numerico.");
            return true;
        }

        /* Actualizo la fecha */
        movimiento.setFecha(this.getFecha());

        /* Insertamos la nueva cuenta */
        if (BizEnt.db.insertMovimiento(movimiento)) {
            BizEnt.showERROR(this, "El movimiento no pudo ser agregado.");
        }
        System.out.println("El id de mov insertado es: " + movimiento.getId());

        return false;
    }

    private boolean updateMovimiento() {
        /* Verifico la informacion ingresada en el campo Nombre */
        if (txtDescri.getText().isEmpty()) {
            BizEnt.showERROR(this, "La descripción no puede estar vacia.");
            return true;
        } else {
            movimiento.setDescri(txtDescri.getText());
        }

        /* Verifico la Categoría seleccionada */
        if (getSelectedCateg() == null || getSelectedCateg().getId() == 1) {
            BizEnt.showERROR(this, "Debe seleccionar una categoría.");
            return true;
        } else {
            movimiento.setCategoria(getSelectedCateg());
        }

        /* Actualizo el monto del movimiento */
        try {
            movimiento.setMonto(Double.parseDouble(txtMonto.getText()));
        } catch (java.lang.NumberFormatException e) {
            BizEnt.showERROR(this, "El monto debe ser tipo numerico.");
            return true;
        }

        /* Actualizo la fecha */
        movimiento.setFecha(this.getFecha());

        /* Actualizamos el movimiento */
        if (BizEnt.db.updateMovimiento(movimiento)) {
            BizEnt.showERROR(this, "El movimiento no pudo ser actualizado.");
        }

        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JTree categTree;
    private javax.swing.JComboBox cmbAno;
    private javax.swing.JComboBox cmbDia;
    private javax.swing.JComboBox cmbMes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTree jTree2;
    private javax.swing.JTextField txtDescri;
    private javax.swing.JTextField txtMonto;
    // End of variables declaration//GEN-END:variables
}
