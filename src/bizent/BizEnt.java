package bizent;

import java.util.Calendar;
import javax.swing.JOptionPane;
import java.sql.*;
import java.io.File;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.tree.*;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.*;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author ggmoy
 */
public class BizEnt extends javax.swing.JFrame {
    public static Database         db;
    public static DefaultTreeModel categTreeModel;
    private Inv inversiones;

    /**
     * Creates new form BizEnt
     */
    public BizEnt() {
        initComponents();

        /* Cargamos el driver de SQLite */
        try {
            Class.forName("org.sqlite.JDBC");
        } catch (ClassNotFoundException e) {
            System.err.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(0);
        }

        checkMenus();

        /* Connect to the database */
        openDB("BizEnt");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jFileChooser1 = new javax.swing.JFileChooser();
        jDialogExportar = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        txtCarpeta = new javax.swing.JTextField();
        btnExplorador = new javax.swing.JButton();
        btnExportar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jPanelVenc = new javax.swing.JPanel();
        vencHoy = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextArea1 = new javax.swing.JTextArea();
        proxVenc = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cuentasTable = new javax.swing.JTable();
        btnAddCuenta = new javax.swing.JButton();
        btnUpdateCuenta = new javax.swing.JButton();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        btnDeleteMovimiento = new javax.swing.JButton();
        btnUpdateMovimiento = new javax.swing.JButton();
        btnAddMovimiento = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbCuentas = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        movimientosTable = new javax.swing.JTable();
        doTransfer = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        categTree = new javax.swing.JTree();
        jPanel5 = new javax.swing.JPanel();
        pantallaVencimientos1 = new bizent.PantallaVencimientos();
        jPanel6 = new javax.swing.JPanel();
        inv1 = new bizent.Inv();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        mnuArchivoNuevo = new javax.swing.JMenuItem();
        mnuArchivoAbrir = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuSalir = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        mnuCategAgregar = new javax.swing.JMenuItem();
        mnuCategEditar = new javax.swing.JMenuItem();
        mnuCategEliminar = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();

        jMenu3.setText("jMenu3");

        jMenu4.setText("jMenu4");

        jMenuItem1.setText("jMenuItem1");

        jMenuItem4.setText("jMenuItem4");

        jMenuItem6.setText("jMenuItem6");

        jMenuItem10.setText("jMenuItem10");

        jFileChooser1.setFileFilter(new FileNameExtensionFilter("Archivos Excel (xls, xlsx)", "xls", "xlsx"));
        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        jDialogExportar.setTitle("Exportar a Excel");
        jDialogExportar.setMinimumSize(new java.awt.Dimension(400, 169));
        jDialogExportar.setLocationRelativeTo(getParent());

        jLabel3.setText("Carpeta:");
        jLabel3.setText("Archivo:");

        txtCarpeta.setEditable(false);
        txtCarpeta.setToolTipText("");
        txtCarpeta.setMinimumSize(new java.awt.Dimension(4, 39));
        txtCarpeta.setName(""); // NOI18N

        btnExplorador.setText("...");
        btnExplorador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExploradorActionPerformed(evt);
            }
        });

        btnExportar.setText("Exportar");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialogExportarLayout = new javax.swing.GroupLayout(jDialogExportar.getContentPane());
        jDialogExportar.getContentPane().setLayout(jDialogExportarLayout);
        jDialogExportarLayout.setHorizontalGroup(
            jDialogExportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogExportarLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCarpeta, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExplorador, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogExportarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExportar)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar)
                .addGap(33, 33, 33))
        );
        jDialogExportarLayout.setVerticalGroup(
            jDialogExportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogExportarLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jDialogExportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCarpeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExplorador))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(jDialogExportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExportar)
                    .addComponent(btnCancelar))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelVencLayout = new javax.swing.GroupLayout(jPanelVenc);
        jPanelVenc.setLayout(jPanelVencLayout);
        jPanelVencLayout.setHorizontalGroup(
            jPanelVencLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 184, Short.MAX_VALUE)
        );
        jPanelVencLayout.setVerticalGroup(
            jPanelVencLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 91, Short.MAX_VALUE)
        );

        jLabel2.setText("Vencimientos a Efectuar:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setAutoscrolls(false);
        jTextArea1.setBorder(null);

        javax.swing.GroupLayout vencHoyLayout = new javax.swing.GroupLayout(vencHoy);
        vencHoy.setLayout(vencHoyLayout);
        vencHoyLayout.setHorizontalGroup(
            vencHoyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextArea1)
            .addGroup(vencHoyLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        vencHoyLayout.setVerticalGroup(
            vencHoyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vencHoyLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextArea1, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE))
        );

        jLabel4.setText("Próximos vencimientos:");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);

        javax.swing.GroupLayout proxVencLayout = new javax.swing.GroupLayout(proxVenc);
        proxVenc.setLayout(proxVencLayout);
        proxVencLayout.setHorizontalGroup(
            proxVencLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextArea2)
            .addGroup(proxVencLayout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        proxVencLayout.setVerticalGroup(
            proxVencLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proxVencLayout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextArea2, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BizEnt");

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cuentasTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"10/05/2012", "Caja", "Caja", "Habilitada", null},
                {"11/05/2013", "Citibank", "Banco", "Habilitada", null},
                {"12/05/2013", "Credicoop", "Banco", "Habilitada", null}
            },
            new String [] {
                "Fecha de creación", "Nombre", "Tipo", "Estado", "Saldo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        /* Custom ggmoy configuration */
        cuentasTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ((DefaultTableCellRenderer) cuentasTable.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
        cuentasTable.getTableHeader().setFont(new Font("SansSerif", Font.BOLD, 12));
        cuentasTable.getTableHeader().setReorderingAllowed(false);
        cuentasTable.getTableHeader().setResizingAllowed(false);
        jScrollPane1.setViewportView(cuentasTable);

        btnAddCuenta.setText("Agregar");
        btnAddCuenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCuentaActionPerformed(evt);
            }
        });

        btnUpdateCuenta.setText("Modificar");
        btnUpdateCuenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCuentaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 762, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAddCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdateCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateCuenta)
                    .addComponent(btnAddCuenta))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Cuentas", jPanel3);

        jSplitPane2.setDividerLocation(150);

        btnDeleteMovimiento.setText("Eliminar");
        btnDeleteMovimiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMovimientoActionPerformed(evt);
            }
        });

        btnUpdateMovimiento.setText("Modificar");
        btnUpdateMovimiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateMovimientoActionPerformed(evt);
            }
        });

        btnAddMovimiento.setText("Agregar");
        btnAddMovimiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMovimientoActionPerformed(evt);
            }
        });

        jLabel1.setText("Seleccione cuenta:");

        cmbCuentas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todas", "Caja", "Caja de ahorro", "Cuenta corriente" }));
        cmbCuentas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCuentasItemStateChanged(evt);
            }
        });
        cmbCuentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCuentasActionPerformed(evt);
            }
        });

        movimientosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"01/05/2013", null, "Sueldo Nahuel", null, null,  new Double(120.0)},
                {"02/05/2013", null, "Sueldo Surai", null, null, null},
                {"03/05/2013", null, "ABL", null, null, null},
                {"04/05/2013", null, "Supermercado", null, null, null}
            },
            new String [] {
                "Fecha", "Categoría", "Descripcion", "Ingreso", "Egreso", "Saldo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        movimientosTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ((DefaultTableCellRenderer) movimientosTable.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
        movimientosTable.getTableHeader().setFont(new Font("SansSerif", Font.BOLD, 12));
        movimientosTable.getTableHeader().setReorderingAllowed(false);
        movimientosTable.getTableHeader().setResizingAllowed(false);
        jScrollPane4.setViewportView(movimientosTable);

        doTransfer.setText("Transferir");
        doTransfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doTransferActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(4, 4, 4)
                        .addComponent(cmbCuentas, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(doTransfer)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(cmbCuentas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(doTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAddMovimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpdateMovimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDeleteMovimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteMovimiento)
                    .addComponent(btnUpdateMovimiento)
                    .addComponent(btnAddMovimiento))
                .addContainerGap())
        );

        jSplitPane2.setRightComponent(jPanel1);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Categorías");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Ingresos");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Alquileres");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Intereses");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Regalos");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Sueldos");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Egresos");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Impuestos");
        javax.swing.tree.DefaultMutableTreeNode treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Arba");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Municipalidad");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Patentes");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Servicios");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Internet");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Cable");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Telefono");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Celulares");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Educación");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Universidad");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Cursos");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Comestibles");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Transacciones");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Entre Cuentas");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Inversiones");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Plazos Fijos");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        categTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        categTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                categTreeValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(categTree);

        jSplitPane2.setLeftComponent(jScrollPane3);

        jTabbedPane1.addTab("Movimientos", jSplitPane2);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pantallaVencimientos1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 786, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(pantallaVencimientos1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 18, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Vencimientos", jPanel5);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(inv1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 24, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(inv1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Inversiones", jPanel6);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        jMenu5.setText("Archivo");

        mnuArchivoNuevo.setText("Nuevo");
        mnuArchivoNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuArchivoNuevoActionPerformed(evt);
            }
        });
        mnuArchivoNuevo.setVisible(false);
        jMenu5.add(mnuArchivoNuevo);

        mnuArchivoAbrir.setText("Abrir");
        mnuArchivoAbrir.setEnabled(false);
        mnuArchivoAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuArchivoAbrirActionPerformed(evt);
            }
        });
        mnuArchivoAbrir.setVisible(false);
        jMenu5.add(mnuArchivoAbrir);
        jMenu5.add(jSeparator1);

        mnuSalir.setText("Salir");
        mnuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSalirActionPerformed(evt);
            }
        });
        jMenu5.add(mnuSalir);

        jMenuBar1.add(jMenu5);

        jMenu6.setText("Categorías");
        jMenu6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu6MouseClicked(evt);
            }
        });

        mnuCategAgregar.setText("Agregar");
        mnuCategAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCategAgregarActionPerformed(evt);
            }
        });
        jMenu6.add(mnuCategAgregar);

        mnuCategEditar.setText("Editar");
        mnuCategEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCategEditarActionPerformed(evt);
            }
        });
        jMenu6.add(mnuCategEditar);

        mnuCategEliminar.setText("Eliminar");
        mnuCategEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCategEliminarActionPerformed(evt);
            }
        });
        jMenu6.add(mnuCategEliminar);

        jMenuBar1.add(jMenu6);

        jMenu1.setText("Exportar");

        jMenuItem2.setText("Exportar a Excel");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ayuda");

        jMenuItem9.setText("Acerca de...");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuArchivoNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuArchivoNuevoActionPerformed
        String database = JOptionPane.showInputDialog(this, "Ingrese el nombre:", "Archivo nuevo", JOptionPane.PLAIN_MESSAGE);

        /* Verificamos que la base ingresada no exista */
        if (database == null) {
            return;
        } else if (new File(database + ".biz").exists()) {
            BizEnt.showERROR(this, "La base de datos ingresada ya existe.");
            return;
        }

        /* Connect to the database */
        if (!connectToDB(database)) {
            return;
        }

        /* Create tables */
        if (BizEnt.db.createTables()) {
            BizEnt.showERROR(this, "Se produjo un error al intentar crear las tablas.");
            return;
        }

        checkMenus();
    }//GEN-LAST:event_mnuArchivoNuevoActionPerformed

    private void mnuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnuSalirActionPerformed

    private void jMenu6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu6MouseClicked
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new Categorias().setVisible(true);
            }
        });
    }//GEN-LAST:event_jMenu6MouseClicked

    private void mnuArchivoAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuArchivoAbrirActionPerformed
        String database = (String) JOptionPane.showInputDialog(this, "Seleccione la base de datos:", "Abrir base de datos",
                JOptionPane.INFORMATION_MESSAGE, null, getDatabases(), null);

        /* Connect to the database if it was selected */
        if (database != null) { openDB(database); }
    }//GEN-LAST:event_mnuArchivoAbrirActionPerformed

    private void openDB(String database) {
        if (!connectToDB(database)) {
            return;
        }
        BizEnt.db.loadDataModels();

        /* Update cuentasJTable */
        cuentasTable.setModel(BizEnt.db.getCuentasTableModel());
        updateCuentasJTable();
      
        cmbCuentas.setModel(BizEnt.db.getCuentasComboBoxModel());

        /* Update movimientosTable */
        movimientosTable.setModel(BizEnt.db.getMovimientosTableModel());
        updateMovimientosJTable();

        inv1.getTable().setModel(BizEnt.db.getInversionesTableModel());
        inv1.updateInversionesJTable();
        updateCategoriasJTree();

        pantallaVencimientos1.getTable().setModel(BizEnt.db.getVencimientosTableModel());
        pantallaVencimientos1.getTable().getColumn("Fecha").setCellRenderer(new DateRenderer("dd-MM-yyyy"));
        pantallaVencimientos1.updateVencimientosJTable();

//        BizEnt.db.updateMovimientosTableModel(BizEnt.db.getCuentasComboBoxModel().getElementAt(cmbCuentas.getSelectedIndex()));

        String[] a=BizEnt.db.getAlertasVencimientos();
        boolean b=false;
        jPanelVenc.setLayout(new BoxLayout(jPanelVenc,BoxLayout.Y_AXIS));
        if (!a[0].equals("")){
            jTextArea1.setBackground(jPanelVenc.getBackground());
            jTextArea1.setText(a[0]);
            jPanelVenc.add(vencHoy);
            b=true;
        }
        if (!a[1].equals("")){
            jTextArea2.setBackground(jPanelVenc.getBackground());
            jTextArea2.setText(a[1]);
            jPanelVenc.add(proxVenc);
            b=true;
        }
        if(b)
        {
            JOptionPane.showMessageDialog(this.getParent(), jPanelVenc, "Vencimientos", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    /**
     * Eliminar Categoría
     */
    private void mnuCategEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCategEliminarActionPerformed
        TreePath currentSelection = categTree.getSelectionPath();

        if (currentSelection != null) {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) currentSelection.getLastPathComponent();
            MutableTreeNode        parentNode   = (MutableTreeNode) selectedNode.getParent();

            if (parentNode != null) {
                if (!BizEnt.db.deleteCategoria((Categoria) selectedNode.getUserObject())) {
                    /* Elimino el nodo del árbol de categorías y luego seleccione el padre del mismo */
                    BizEnt.categTreeModel.removeNodeFromParent(selectedNode);
                    categTree.setSelectionPath(new TreePath(BizEnt.categTreeModel.getPathToRoot(parentNode)));
                }
            }
        }
    }//GEN-LAST:event_mnuCategEliminarActionPerformed

    /**
     * Agregar Categoría
     */
    private void mnuCategAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCategAgregarActionPerformed
        TreePath currentSelection = categTree.getSelectionPath();

        if (currentSelection != null) {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) currentSelection.getLastPathComponent();
            String                 nombre       = JOptionPane.showInputDialog(this, "Ingrese el nombre:", "Agregar categoría", JOptionPane.PLAIN_MESSAGE);

            if (nombre != null) {
                if (!nombre.equals("")) {
                    Categoria categoria = new Categoria(((Categoria) selectedNode.getUserObject()).getId(), nombre);

                    if (!BizEnt.db.existsCategoria(categoria)) {
                        if (!BizEnt.db.insertCategoria(categoria)) {
                            DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(categoria);

                            /* Busco la posición correcta */
                            int i = 0;
                            for (; i < selectedNode.getChildCount(); i++) {
                                if (categoria.toString().compareTo(selectedNode.getChildAt(i).toString()) < 0) { break; }
                            }

                            /* Agreog el nuevo nodo y luego lo selecciono */
                            BizEnt.categTreeModel.insertNodeInto(childNode, selectedNode, i);
                            categTree.setSelectionPath(new TreePath(BizEnt.categTreeModel.getPathToRoot(childNode)));
                        }
                    } else {
                        BizEnt.showERROR(this, "La categoría ingresada ya existe.");
                    }
                } else {
                    BizEnt.showERROR(this, "El nombre no puede estar vacío.");
                }
            }
        }
    }//GEN-LAST:event_mnuCategAgregarActionPerformed

    private void updateMovimientosTable() {
        TreePath currentSelection = categTree.getSelectionPath();

        if (cmbCuentas.getItemCount() > 0) {
            Cuenta                 cuenta       = BizEnt.db.getCuentasComboBoxModel().getElementAt(cmbCuentas.getSelectedIndex());
            DefaultMutableTreeNode selectedNode = null;

            if (currentSelection != null) {
                selectedNode = (DefaultMutableTreeNode) currentSelection.getLastPathComponent();
            }
            BizEnt.db.updateMovimientosTableModel(cuenta, selectedNode);
        }
    }

    /**
     * Listener del Árbol Categorías
     */
    private void categTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_categTreeValueChanged
        TreePath currentSelection = categTree.getSelectionPath();

        if (currentSelection != null) {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) currentSelection.getLastPathComponent();
            Categoria              categoria    = (Categoria) selectedNode.getUserObject();

            /**
             * Sólamente se podrán borrar categorías cuyo ID sea mayor a 3, ya que las
             * menores a dicho número son reservadas.
             * Tampoco será posible eliminar categorías que posean subcategorías.  Para
             * poder eliminarlas se deberá eliminar primero todas las subcategorías.
             */
            if (categoria.getId() > 3) {
                mnuCategEliminar.setEnabled(selectedNode.isLeaf());
                mnuCategEditar.setEnabled(true);
            } else {
                mnuCategEliminar.setEnabled(false);
                mnuCategEditar.setEnabled(false);
            }

            if (categoria.getId() == 1) {
                mnuCategAgregar.setEnabled(false);
            } else {
                mnuCategAgregar.setEnabled(true);
            }

            updateMovimientosTable();
        }
    }//GEN-LAST:event_categTreeValueChanged

    private void mnuCategEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCategEditarActionPerformed
        TreePath currentSelection = categTree.getSelectionPath();

        if (currentSelection != null) {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) currentSelection.getLastPathComponent();
            String                 newName      = JOptionPane.showInputDialog(this, "Ingrese el nombre:", "Editar categoría", JOptionPane.PLAIN_MESSAGE);

            if (newName != null) {
                if (!newName.equals("")) {
                    Categoria categoria = new Categoria(((Categoria) selectedNode.getUserObject()).getId(),
                                                        ((Categoria) selectedNode.getUserObject()).getPid(), newName);

                    if (!BizEnt.db.existsCategoria(categoria)) {
                        if (!BizEnt.db.editCategoria(categoria)) {
                            DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) selectedNode.getParent();

                            /* Actualizo el nombre */
                            ((Categoria) selectedNode.getUserObject()).setName(newName);

                            /* Elimino el nodo seleccionado */
                            BizEnt.categTreeModel.removeNodeFromParent(selectedNode);

                            /* Busco la posición correcta para el nuevo nodo */
                            int i = 0;
                            for (; i < parentNode.getChildCount(); i++) {
                                if (categoria.toString().compareTo(parentNode.getChildAt(i).toString()) < 0) { break; }
                            }

                            /* Agreog el nuevo nodo y luego lo selecciono */
                            BizEnt.categTreeModel.insertNodeInto(selectedNode, parentNode, i);
                            categTree.setSelectionPath(new TreePath(BizEnt.categTreeModel.getPathToRoot(selectedNode)));
                        }
                    } else {
                        BizEnt.showERROR(this, "La categoría ingresada ya existe.");
                    }
                } else {
                    BizEnt.showERROR(this, "El nombre no puede estar vacío.");
                }
            }
        }
    }//GEN-LAST:event_mnuCategEditarActionPerformed

    private void btnAddCuentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCuentaActionPerformed
        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                AddCuenta dialog = new AddCuenta(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
                    }
                });
                dialog.setLocationRelativeTo(null); // Center on the screen
                dialog.setVisible(true);
            }
        });
    }//GEN-LAST:event_btnAddCuentaActionPerformed

    private void btnUpdateCuentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCuentaActionPerformed
        final int selectedRow = cuentasTable.getSelectionModel().getLeadSelectionIndex();

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddCuenta dialog = new AddCuenta(new javax.swing.JFrame(), true, Integer.parseInt(cuentasTable.getValueAt(selectedRow, 0).toString()));
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
                    }
                });
                dialog.setLocationRelativeTo(null); // Center on the screen
                dialog.setVisible(true);
            }
        });
    }//GEN-LAST:event_btnUpdateCuentaActionPerformed

    private void btnAddMovimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMovimientoActionPerformed
        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Cuenta    cuenta    = BizEnt.db.getCuentasComboBoxModel().getElementAt(cmbCuentas.getSelectedIndex());
                if (cuenta != null) {
                    AddMovimiento dialog = new AddMovimiento(new javax.swing.JFrame(), true, 0, cuenta);
                    dialog.setLocationRelativeTo(null); // Center on the screen
                    dialog.setVisible(true);
                }
            }
        });
    }//GEN-LAST:event_btnAddMovimientoActionPerformed

    private void btnUpdateMovimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateMovimientoActionPerformed
        final int selectedRow = movimientosTable.getSelectionModel().getLeadSelectionIndex();

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                if (BizEnt.db.getMovimiento(Integer.parseInt(movimientosTable.getValueAt(selectedRow, 0).toString())).getDescri().equals("Saldo Inicial") ||
                    BizEnt.db.getMovimiento(Integer.parseInt(movimientosTable.getValueAt(selectedRow, 0).toString())).getCategoria().getId() == 50 ||
                    BizEnt.db.getMovimiento(Integer.parseInt(movimientosTable.getValueAt(selectedRow, 0).toString())).getCategoria().getId() == 51) {
                    return;
                } else if (BizEnt.db.getMovimiento(Integer.parseInt(movimientosTable.getValueAt(selectedRow, 0).toString())).getCategoria().getId() == 5 ||
                           BizEnt.db.getMovimiento(Integer.parseInt(movimientosTable.getValueAt(selectedRow, 0).toString())).getCategoria().getId() == 6) {
                    AddTransfer dialog = new AddTransfer(new javax.swing.JFrame(), true, Integer.parseInt(movimientosTable.getValueAt(selectedRow, 0).toString()));
                    dialog.setLocationRelativeTo(null); // Center on the screen
                    dialog.setVisible(true);
                } else {
                    AddMovimiento dialog = new AddMovimiento(new javax.swing.JFrame(), true, Integer.parseInt(movimientosTable.getValueAt(selectedRow, 0).toString()), null);
                    dialog.setLocationRelativeTo(null); // Center on the screen
                    dialog.setVisible(true);
                }
            }
        });
    }//GEN-LAST:event_btnUpdateMovimientoActionPerformed

    private void cmbCuentasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCuentasItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            updateMovimientosTable();
            Cuenta cuenta = BizEnt.db.getCuentasComboBoxModel().getElementAt(cmbCuentas.getSelectedIndex());
            if (!cuenta.getStatus()) {
                btnAddMovimiento.setEnabled(false);
                btnUpdateMovimiento.setEnabled(false);
                btnDeleteMovimiento.setEnabled(false);
            } else {
                btnAddMovimiento.setEnabled(true);
                btnUpdateMovimiento.setEnabled(true);
                btnDeleteMovimiento.setEnabled(true);
            }
        }
    }//GEN-LAST:event_cmbCuentasItemStateChanged

    private void cmbCuentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCuentasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCuentasActionPerformed

    private void btnDeleteMovimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMovimientoActionPerformed
        int selectedRow = movimientosTable.getSelectionModel().getLeadSelectionIndex();

        if (BizEnt.db.getMovimiento(Integer.parseInt(movimientosTable.getValueAt(selectedRow, 0).toString())).getDescri().equals("Saldo Inicial") ||
                BizEnt.db.getMovimiento(Integer.parseInt(movimientosTable.getValueAt(selectedRow, 0).toString())).getCategoria().getId() == 50 ||
                BizEnt.db.getMovimiento(Integer.parseInt(movimientosTable.getValueAt(selectedRow, 0).toString())).getCategoria().getId() == 51) {
            return;
        } else {
            int retVal = JOptionPane.showConfirmDialog(this, "Desea eliminar el movimiento seleccionado?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
            if (retVal == 0) {
                Movimiento movimiento  = BizEnt.db.getMovimiento(Integer.parseInt(movimientosTable.getValueAt(selectedRow, 0).toString()));
                if (BizEnt.db.deleteMovimiento(movimiento)) {
                    BizEnt.showERROR(this, "El movimiento no pudo ser eliminado.");
                }

                if (movimiento.getIdMovRel() > 0) {
                    movimiento = BizEnt.db.getMovimiento(movimiento.getIdMovRel());
                    if (BizEnt.db.deleteMovimiento(movimiento)) {
                        BizEnt.showERROR(this, "El movimiento no pudo ser eliminado.");
                    }
                }
            }
        }
    }//GEN-LAST:event_btnDeleteMovimientoActionPerformed

    private void doTransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doTransferActionPerformed
        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Cuenta cuenta = BizEnt.db.getCuentasComboBoxModel().getElementAt(cmbCuentas.getSelectedIndex());
                if (cuenta != null) {
                    AddTransfer dialog = new AddTransfer(new javax.swing.JFrame(), true, 0);
                    dialog.setLocationRelativeTo(null); // Center on the screen
                    dialog.setVisible(true);
                }
            }
        });
    }//GEN-LAST:event_doTransferActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        jDialogExportar.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    private void btnExploradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExploradorActionPerformed
        File file;
        String a;
        if (jFileChooser1.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            file = jFileChooser1.getSelectedFile();
            a=file.getPath();
            if ((a.endsWith("xls")||a.endsWith("xlsx")))
            {
                a=a.substring(0, a.lastIndexOf(".xls"));
            }
            txtCarpeta.setText(a);
            //txtArchivo.setText(file.getName());
        }

    }//GEN-LAST:event_btnExploradorActionPerformed

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        String a=txtCarpeta.getText();
        File file=new File(txtCarpeta.getText().concat(".xls"));
        if (file.exists())
        {
            int res=JOptionPane.showConfirmDialog(jDialogExportar, "El archivo \""+a+"\" ya existe.\n¿Desea sobrescribirlo?", "Archivo Existente",JOptionPane.YES_NO_OPTION);

            if(res==1)
            {
                jDialogExportar.dispose();
                return;
            }
        }
        JTable venc=new JTable(db.getVencimientosTableModel());
        db.updateVencimientosTableModel();
        int index = cmbCuentas.getSelectedIndex();
        boolean b=reportesExcel.exportarDatosCuentas(a, cuentasTable, venc);
        db.updateMovimientosTableModel((Cuenta)cmbCuentas.getItemAt(index));
        if (b)
        {
            JOptionPane.showMessageDialog(this.getParent(), "Se ha creado el archivo.");
        }
        else
        {
            JOptionPane.showMessageDialog(this.getParent(), "No se pudo guardar el archivo.");
        }
        jDialogExportar.dispose();

    }//GEN-LAST:event_btnExportarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        this.jDialogExportar.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        JOptionPane.showMessageDialog(getParent(), "BizEnt Starter Edition\nv1.0");
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BizEnt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BizEnt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BizEnt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BizEnt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BizEnt bizent = new BizEnt();
                bizent.setLocationRelativeTo(null); // Center on the screen
                bizent.setVisible(true);
            }
        });
    }

    /* Enable or disable menus depending on different conditions */
    private void checkMenus() {
        if (getDatabases().length > 0) {
            mnuArchivoAbrir.setEnabled(true);
        }
    }

    /* Get an array of available databases */
    private Object[] getDatabases() {
        File[] files = new File(".").listFiles();
        ArrayList dbs = new ArrayList();

        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                if (files[i].getName().endsWith(".biz")) {
                    dbs.add(files[i].getName().replaceFirst(".biz", ""));
                }
            }
        }

        return dbs.toArray();
    }

    private boolean connectToDB(String dbname) {
        try {
            BizEnt.db = new SQLiteDB(dbname);
        } catch (ClassNotFoundException ex) {
            BizEnt.showERROR(this, "No se pudo cargar el driver de SQLite.");
            return false;
        } catch (SQLException e) {
            BizEnt.showERROR(this, "No se pudo connectar a la base.");
            return false;
        }

        return true;
    }

    private void updateCuentasJTable() {
        cuentasTable.getColumnModel().getColumn(0).setMinWidth(0);
        cuentasTable.getColumnModel().getColumn(0).setMaxWidth(0);
        cuentasTable.getColumn("Fecha de creación").setCellRenderer(new DateRenderer("dd-MM-yyyy"));
        cuentasTable.getColumn("Saldo").setCellRenderer(new DecimalRenderer("###,##0.00"));
    }


    private void updateMovimientosJTable() {
        movimientosTable.getColumnModel().getColumn(0).setMinWidth(0);
        movimientosTable.getColumnModel().getColumn(0).setMaxWidth(0);
        movimientosTable.getColumn("Fecha").setCellRenderer(new DateRenderer("dd-MM-yyyy"));
        movimientosTable.getColumn("Ingreso").setCellRenderer(new DecimalRenderer("###,##0.00"));
        movimientosTable.getColumn("Egreso").setCellRenderer(new DecimalRenderer("###,##0.00"));
        movimientosTable.getColumn("Saldo").setCellRenderer(new DecimalRenderer("###,##0.00"));
    }

    private void updateCategoriasJTree() {
        BizEnt.categTreeModel = BizEnt.db.createCategoriasTreeModel();
        categTree.setModel(BizEnt.categTreeModel);
        categTree.setSelectionPath(new TreePath(BizEnt.categTreeModel.getRoot()));
    }

    private Categoria getSelectedCateg() {
        TreePath currentSelection = categTree.getSelectionPath();

        if (currentSelection != null) {
            return (Categoria) (((DefaultMutableTreeNode) currentSelection.getLastPathComponent()).getUserObject());
        }

        return null;
    }

    public static void showERROR(java.awt.Component comp, String message) {
        JOptionPane.showMessageDialog(comp, message, "ERROR", JOptionPane.ERROR_MESSAGE, null);
    }

    public static int getLastDayOfMonth(int month, int year) {
        Calendar calendar = Calendar.getInstance();

        calendar.set(Calendar.DAY_OF_MONTH, 1);
        calendar.set(Calendar.MONTH, month);
        calendar.set(Calendar.YEAR, year);

        return calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCuenta;
    private javax.swing.JButton btnAddMovimiento;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnDeleteMovimiento;
    private javax.swing.JButton btnExplorador;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnUpdateCuenta;
    private javax.swing.JButton btnUpdateMovimiento;
    private javax.swing.JTree categTree;
    public static javax.swing.JComboBox cmbCuentas;
    private javax.swing.JTable cuentasTable;
    private javax.swing.JButton doTransfer;
    private bizent.Inv inv1;
    private javax.swing.JDialog jDialogExportar;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanelVenc;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JMenuItem mnuArchivoAbrir;
    private javax.swing.JMenuItem mnuArchivoNuevo;
    private javax.swing.JMenuItem mnuCategAgregar;
    private javax.swing.JMenuItem mnuCategEditar;
    private javax.swing.JMenuItem mnuCategEliminar;
    private javax.swing.JMenuItem mnuSalir;
    private javax.swing.JTable movimientosTable;
    private bizent.PantallaVencimientos pantallaVencimientos1;
    private javax.swing.JPanel proxVenc;
    private javax.swing.JTextField txtCarpeta;
    private javax.swing.JPanel vencHoy;
    // End of variables declaration//GEN-END:variables
}
